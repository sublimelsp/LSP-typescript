{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-typescript.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-typescript",
          "definitions": {
            "PluginConfig": {
              "properties": {
                "initializationOptions": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "hostInfo": {
                      "type": "string",
                      "markdownDescription": "Information about the host, for example `Emacs 24.4` or `Sublime Text version 3075`. This value is only relevant when using `yarn pnp` which might apply special logic for certain values."
                    },
                    "completionDisableFilterText": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Don't set `filterText` property on completion items."
                    },
                    "disableAutomaticTypingAcquisition": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Disables tsserver from automatically fetching missing type definitions (`@types` packages) for external modules."
                    },
                    "locale": {
                      "type": "string",
                      "pattern": "^([a-z]+)([_\\-]([a-z]+))?$",
                      "enum": [
                        "cs",
                        "de",
                        "en",
                        "es",
                        "fr",
                        "it",
                        "ja",
                        "ko",
                        "pl",
                        "pt-br",
                        "ru",
                        "tr",
                        "zh-cn",
                        "zh-tw"
                      ],
                      "default": "en",
                      "markdownDescription": "The locale to use for showing diagnostics."
                    },
                    "maxTsServerMemory": {
                      "type": "number",
                      "markdownDescription": "The maximum size of the V8's old memory section in megabytes (for example `4096` means 4GB). The default value is dynamically configured by Node so can differ per system. Increase for very big projects that exceed allowed memory usage."
                    },
                    "npmLocation": {
                      "type": "string",
                      "markdownDescription": "Specifies the path to the NPM executable used for Automatic Type Acquisition."
                    },
                    "plugins": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the plugin."
                          },
                          "location": {
                            "type": "string",
                            "description": "The location of the plugin."
                          }
                        },
                        "defaultSnippets": [
                          {
                            "body": {
                              "name": "$0",
                              "location": "$1"
                            }
                          }
                        ]
                      }
                    },
                    "preferences": {
                      "type": "object",
                      "properties": {
                        "allowIncompleteCompletions": {
                          "type": "boolean",
                          "default": true,
                          "markdownDescription": "Allows import module names to be resolved in the initial completions request."
                        },
                        "disableSuggestions": {
                          "type": "boolean",
                        },
                        "quotePreference": {
                          "enum": [
                            "auto",
                            "double",
                            "single"
                          ],
                        },
                        "autoImportFileExcludePatterns": {
                          "type": "array",
                          "default": [],
                          "markdownDescription": "Glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.\n\nRelative paths are resolved relative to the workspace root."
                        },
                        "includeCompletionsForModuleExports": {
                          "type": "boolean",
                          "markdownDescription": "If enabled, TypeScript will search through all external modules' exports and add them to the completions list. This affects lone identifier completions but not completions on the right hand side of `obj.`."
                        },
                        "includeCompletionsForImportStatements": {
                          "type": "boolean",
                          "markdownDescription": "Enables auto-import-style completions on partially-typed import statements. E.g., allows `import write|` to be completed to `import { writeFile } from \"fs\"`."
                        },
                        "includeCompletionsWithSnippetText": {
                          "type": "boolean",
                          "markdownDescription": "Allows completions to be formatted with snippet text, indicated by `CompletionItem[\"isSnippet\"]`."
                        },
                        "includeCompletionsWithInsertText": {
                          "type": "boolean",
                          "markdownDescription": "If enabled, the completion list will include completions with invalid identifier names. For those entries, The `insertText` and `replacementSpan` properties will be set to change from `.x` property access to `[\"x\"]`."
                        },
                        "includeAutomaticOptionalChainCompletions": {
                          "type": "boolean",
                          "markdownDescription": "Unless this option is `false`, or `includeCompletionsWithInsertText` is not enabled, member completion lists triggered with `.` will include entries on potentially-null and potentially-undefined values, with insertion text to replace preceding `.` tokens with `?.`."
                        },
                        "includeCompletionsWithClassMemberSnippets": {
                          "type": "boolean",
                          "markdownDescription": "If enabled, completions for class members (e.g. methods and properties) will include a whole declaration for the member. E.g., `class A { f| }` could be completed to `class A { foo(): number {} }`, instead of `class A { foo }`.\n\nRequires TypeScript 4.5+."
                        },
                        "includeCompletionsWithObjectLiteralMethodSnippets": {
                          "type": "boolean",
                          "default": true,
                          "markdownDescription": "If enabled, object literal methods will have a method declaration completion entry in addition to the regular completion entry containing just the method name. E.g., `const objectLiteral: T = { f| }` could be completed to `const objectLiteral: T = { foo(): void {} }`, in addition to `const objectLiteral: T = { foo }`. Requires TypeScript v4.7.2."
                        },
                        "useLabelDetailsInCompletionEntries": {
                          "type": "boolean",
                          "default": true,
                          "markdownDescription": "Indicates whether {@link CompletionEntry.labelDetails completion entry label details} are supported. If not, contents of `labelDetails` may be included in the {@link CompletionEntry.name} property. Only supported if the client supports `textDocument.completion.completionItem.labelDetailsSupport` capability and a compatible TypeScript version is used. Requires TypeScript v4.7.2."
                        },
                        "importModuleSpecifierPreference": {
                          "enum": [
                            "shortest",
                            "project-relative",
                            "relative",
                            "non-relative"
                          ],
                        },
                        "importModuleSpecifierEnding": {
                          "enum": [
                            "auto",
                            "minimal",
                            "index",
                            "js"
                          ],
                          "markdownDescription": "Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\"."
                        },
                        "allowTextChangesInNewFiles": {
                          "type": "boolean",
                        },
                        "lazyConfiguredProjectsFromExternalProject": {
                          "type": "boolean",
                        },
                        "organizeImportsIgnoreCase": {
                          "enum": [
                            "auto",
                            true,
                            false
                          ],
                          "default": "auto",
                          "markdownDescription": "Indicates whether imports should be organized in a case-insensitive manner."
                        },
                        "organizeImportsCollation": {
                          "enum": [
                            "ordinal",
                            "unicode",
                          ],
                          "default": "ordinal",
                          "markdownDescription": "Indicates whether imports should be organized via an `\"ordinal\"` (binary) comparison using the numeric value of their code points, or via `\"unicode\"` collation (via the [Unicode Collation Algorithm](https://unicode.org/reports/tr10/#Scope)) using rules associated with the locale specified in `organizeImportsCollationLocale`."
                        },
                        "organizeImportsCollationLocale": {
                          "type": "string",
                          "default": "en",
                          "markdownDescription": "Indicates the locale to use for `\"unicode\"` collation. If not specified, the locale `\"en\"` is used as an invariant for the sake of consistent sorting. Use `\"auto\"` to use the detected UI locale.\n\nThis preference is ignored if `organizeImportsCollation` is not `\"unicode\"`."
                        },
                        "organizeImportsNumericCollation": {
                          "type": "boolean",
                          "default": false,
                          "markdownDescription": "Indicates whether numeric collation should be used for digit sequences in strings. When `true`, will collate strings such that `a1z < a2z < a100z`. When `false`, will collate strings such that `a1z < a100z < a2z`.\n\nThis preference is ignored if `organizeImportsCollation` is not `\"unicode\"`."
                        },
                        "organizeImportsAccentCollation": {
                          "type": "boolean",
                          "default": true,
                          "markdownDescription": "Indicates whether accents and other diacritic marks are considered unequal for the purpose of collation. When `true`, characters with accents and other diacritics will be collated in the order defined by the locale specified in `organizeImportsCollationLocale`.\n\nThis preference is ignored if {@link organizeImportsCollation} is not `\"unicode\"`."
                        },
                        "organizeImportsCaseFirst": {
                          "enum": [
                            "upper",
                            "lower",
                            false,
                          ],
                          "default": false,
                          "markdownDescription": "Indicates whether upper case or lower case should sort first. When `false`, the default order for the locale specified in `organizeImportsCollationLocale` is used.\n\nThis preference is ignored if `organizeImportsCollation` is not `\"unicode\"`. This preference is also ignored if we are using case-insensitive sorting, which occurs when `organizeImportsIgnoreCase` is `true`, or if `organizeImportsIgnoreCase` is `\"auto\"` and the auto-detected case sensitivity is determined to be case-insensitive."
                        },
                        "providePrefixAndSuffixTextForRename": {
                          "type": "boolean",
                        },
                        "provideRefactorNotApplicableReason": {
                          "type": "boolean",
                          "default": true,
                        },
                        "allowRenameOfImportPath": {
                          "type": "boolean",
                        },
                        "includePackageJsonAutoImports": {
                          "enum": [
                            "auto",
                            "on",
                            "off"
                          ],
                        },
                        "displayPartsForJSDoc": {
                          "type": "boolean",
                        },
                        "generateReturnInDocTemplate": {
                          "type": "boolean",
                        },
                        "jsxAttributeCompletionStyle": {
                          "enum": [
                            "auto",
                            "braces",
                            "none"
                          ],
                          "default": "auto",
                          "markdownEnumDescriptions": [
                            "Insert `={}` or `=\"\"` after attribute names based on the prop type.",
                            "Insert `={}` after attribute names.",
                            "Only insert attribute names."
                          ],
                          "markdownDescription": "Preferred style for JSX attribute completions.\n\nRequires TypeScript 4.5+."
                        }
                      }
                    },
                    "tsserver.logDirectory": {
                      "type": "string",
                      "default": "",
                      "markdownDescription": "The path to the directory where the `tsserver` log files will be created. If not provided, the log files will be created within the workspace, inside the `.log` directory. If no workspace root is provided when initializating the server and no custom path is specified then the logs will not be created."
                    },
                    "tsserver.logVerbosity": {
                      "enum": [
                        "off",
                        "terse",
                        "normal",
                        "requestTime",
                        "verbose"
                      ],
                      "default": "off",
                      "markdownDescription": "Verbosity of the information logged into the `tsserver` log files.\n\nLog levels from least to most amount of details: `'terse'`, `'normal'`, `'requestTime`', `'verbose'`. Enabling particular level also enables all lower levels.",
                    },
                    "tsserver.path": {
                      "type": "string",
                      "default": "",
                      "markdownDescription": "The path to the `tsserver.js` file or the typescript lib directory. For example: `/Users/me/typescript/lib/tsserver.js`. By default the TypeScript from workspace is used and otherwise fall-backs to the bundled version of TypeScript."
                    },
                    "tsserver.trace": {
                      "enum": [
                        "off",
                        "messages",
                        "verbose"
                      ],
                      "default": "off",
                      "markdownDescription": "The verbosity of logging of the tsserver communication.\n\nDelivered through the LSP messages and not related to file logging."
                    },
                    "tsserver.useSyntaxServer": {
                      "enum": [
                        "auto",
                        "never"
                      ],
                      "default": "auto",
                      "markdownDescription": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing diagnostics or code folding.",
                      "markdownEnumDescriptions": [
                        "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.",
                        "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations."
                      ]
                    },
                  }
                },
                "settings": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "statusText": {
                      "type": "string",
                      "default": "$version, $source",
                      "markdownDescription": "The text to be shown next to the server indicator in the status bar. Can use two template variables `$version` and `$source` that carry information about used TypeScript version."
                    },
                    "completions.completeFunctionCalls": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Complete functions with their parameter signature.\n\nThis functionality relies on LSP client resolving the completion using the `completionItem/resolve` call. If the client can't do that before inserting the completion then it's not safe to enable it as it will result in some completions having a snippet type without actually being snippets, which can then cause problems when inserting them."
                    },
                    "diagnostics.ignoredCodes": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "uniqueItems": true
                      },
                      "default": [],
                      "markdownDescription": "Diagnostics code to be omitted when reporting diagnostics. See https://github.com/microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json for a full list of valid codes."
                    },
                    "implicitProjectConfiguration.checkJs": {
                      "description": "Enable error reporting in type-checked JavaScript files.",
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable error reporting in type-checked JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#checkJs"
                    },
                    "implicitProjectConfiguration.experimentalDecorators": {
                      "description": "Enable experimental support for TC39 stage 2 draft decorators.",
                      "type": "boolean",
                      "markdownDescription": "Enable experimental support for TC39 stage 2 draft decorators.\n\nSee more: https://www.typescriptlang.org/tsconfig#experimentalDecorators"
                    },
                    "implicitProjectConfiguration.module": {
                      "description": "Specify what module code is generated.",
                      "type": "string",
                      "anyOf": [
                        {
                          "enum": [
                            "CommonJS",
                            "AMD",
                            "System",
                            "UMD",
                            "ES6",
                            "ES2015",
                            "ES2020",
                            "ESNext",
                            "None",
                            "ES2022",
                            "Node16",
                            "NodeNext"
                          ]
                        },
                        {
                          "pattern": "^([Cc][Oo][Mm][Mm][Oo][Nn][Jj][Ss]|[AaUu][Mm][Dd]|[Ss][Yy][Ss][Tt][Ee][Mm]|[Ee][Ss]([356]|20(1[567]|2[02])|[Nn][Ee][Xx][Tt])|[Nn][Oo][dD][Ee]16|[Nn][Oo][Dd][Ed][Nn][Ee][Xx][Tt]|[Nn][Oo][Nn][Ee])$"
                        }
                      ],
                      "markdownDescription": "Specify what module code is generated.\n\nSee more: https://www.typescriptlang.org/tsconfig#module"
                    },
                    "implicitProjectConfiguration.strictFunctionTypes": {
                      "description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictFunctionTypes"
                    },
                    "implicitProjectConfiguration.strictNullChecks": {
                      "description": "When type checking, take into account `null` and `undefined`.",
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "When type checking, take into account `null` and `undefined`.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictNullChecks"
                    },
                    "implicitProjectConfiguration.target": {
                      "description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.",
                      "type": "string",
                      "default": "ES3",
                      "anyOf": [
                        {
                          "enum": [
                            "ES3",
                            "ES5",
                            "ES6",
                            "ES2015",
                            "ES2016",
                            "ES2017",
                            "ES2018",
                            "ES2019",
                            "ES2020",
                            "ES2021",
                            "ES2022",
                            "ESNext"
                          ]
                        },
                        {
                          "pattern": "^([Ee][Ss]([356]|(20(1[56789]|2[012]))|[Nn][Ee][Xx][Tt]))$"
                        }
                      ],
                      "markdownDescription": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\n\nSee more: https://www.typescriptlang.org/tsconfig#target"
                    },
                    "typescript.format.insertSpaceAfterCommaDelimiter": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceAfterConstructor": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterSemicolonInForStatements": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceBeforeFunctionParenthesis": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceAfterTypeAssertion": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.insertSpaceBeforeTypeAnnotation": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.placeOpenBraceOnNewLineForFunctions": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
                      "type": "boolean",
                      "default": false
                    },
                    "typescript.format.semicolons": {
                      "type": "string",
                      "default": "ignore",
                      "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
                      "scope": "resource",
                      "enum": [
                        "ignore",
                        "insert",
                        "remove"
                      ]
                    },
                    "typescript.format.trimTrailingWhitespace": {
                      "type": "boolean",
                      "default": true
                    },
                    "typescript.inlayHints.includeInlayEnumMemberValueHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.includeInlayFunctionLikeReturnTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.includeInlayFunctionParameterTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.includeInlayParameterNameHints": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "typescript.inlayHints.includeInlayParameterNameHintsWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": ""
                    },
                    "typescript.inlayHints.includeInlayPropertyDeclarationTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.includeInlayVariableTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.includeInlayVariableTypeHintsWhenTypeMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "When disabled then type hints on variables whose name is identical to the type name won't be shown. Requires using TypeScript 4.8+ in the workspace."
                    },
                    "javascript.format.insertSpaceAfterCommaDelimiter": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceAfterConstructor": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterSemicolonInForStatements": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceBeforeFunctionParenthesis": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceAfterTypeAssertion": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.insertSpaceBeforeTypeAnnotation": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.placeOpenBraceOnNewLineForFunctions": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
                      "type": "boolean",
                      "default": false
                    },
                    "javascript.format.semicolons": {
                      "type": "string",
                      "default": "ignore",
                      "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
                      "scope": "resource",
                      "enum": [
                        "ignore",
                        "insert",
                        "remove"
                      ]
                    },
                    "javascript.format.trimTrailingWhitespace": {
                      "type": "boolean",
                      "default": true
                    },
                    "javascript.inlayHints.includeInlayEnumMemberValueHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.includeInlayFunctionLikeReturnTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.includeInlayFunctionParameterTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.includeInlayParameterNameHints": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "javascript.inlayHints.includeInlayParameterNameHintsWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": ""
                    },
                    "javascript.inlayHints.includeInlayPropertyDeclarationTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.includeInlayVariableTypeHints": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.includeInlayVariableTypeHintsWhenTypeMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "When disabled then type hints on variables whose name is identical to the type name won't be shown. Requires using TypeScript 4.8+ in the workspace."
                    },
                  }
                }
              }
            }
          },
          "type": "object",
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-typescript#/definitions/PluginConfig"
            }
          ]
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-typescript": {
                      "$ref": "sublime://settings/LSP-typescript#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "LSP.sublime-settings"
        ],
        "schema": {
          "properties": {
            "lsp_code_actions_on_save": {
              "properties": {
                "source.addMissingImports.ts": {
                  "type": "boolean"
                },
                "source.fixAll.ts": {
                  "type": "boolean"
                },
                "source.organizeImports.ts": {
                  "type": "boolean"
                },
                "source.removeUnused.ts": {
                  "type": "boolean"
                },
              }
            }
          }
        }
      },
    ]
  }
}
